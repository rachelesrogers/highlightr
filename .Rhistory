"text with </br> a page break",
"<b>tag without spaces</b>",
"<font color='#9900FF'> color </font>"))
load_all()
token_comments(testing)
token_comments(testing)[1]
token_comments(testing)[[1]]
token_comments(testing)[[1]] %in% c("the", "review")
expect_identical(token_comments(testing)[[1]], c("the", "review"))
identical(token_comments(testing)[[1]], c("the", "review"))
identical(token_comments(testing)[[4]], "color")
check()
check()
use_test()
View(transcript_example)
testing <- data.frame(text =
"<i> The review </i>. text with </br> a page break.<b>tag without spaces</b>.<font color='#9900FF'> color </font>"))
testing <- data.frame(text =
"<i> The review </i>. text with </br> a page break.<b>tag without spaces</b>.<font color='#9900FF'> color </font>")
token_transcript(testing)
token_transcript(testing)[[1]]
load_all()
token_transcript(testing)
check()
check()
check()
check()
check()
check()
check()
paste0("a","b")<-6
paste0("a","b")
data.frame(paste0("a","b")=6)
test<- data.frame(null=6)
test
names(test)<- paste0("a","b")
test
test = data.frame(a=c(1,2,43,4,5,6), b = c("a","b","c","d","e","f"))
test
cbind(test, seq(from=1, to=6))
cbind(test, a=seq(from=1, to=6))
cbind(test, "a"=seq(from=1, to=6))
word <- paste0("h","a")
cbind(test, word=seq(from=1, to=6))
names(test)[ncol(test)]<- "ha"
test
names(test)[ncol(test)]<- paste0("a","b")
test
check()
library(highlightr)
load_all()
descript_ngram_df <-data.frame(collocation = descript_ngram_df$collocation,
transcript_freq = descript_ngram_df$transcript_freq)
check()
check()
check()
check()
check()
document()
check()
check()
collocate_length <- 5
0:(collocate_length-2)
check()
comment_example_rename <- dplyr::rename(comment_example, page_notes=Notes)
toks_comment <- token_comments(comment_example_rename)
transcript_example_rename <- dplyr::rename(transcript_example, text=Text)
toks_transcript <- token_transcript(transcript_example_rename)
collocation_object <- collocate_comments(toks_transcript, toks_comment)
collocation_object
colnames(collocation_object)
use_test()
grepl(colnames(collocation_object), "col_")
grepl("col_",colnames(collocation_object))
colnames[grepl("col_",colnames(collocation_object))]
colnames[grepl("col_",colnames(collocation_object)),]
grepl("col_",colnames(collocation_object))
grepl("col_",colnames(collocation_object), value=TRUE)
grep("col_",colnames(collocation_object), value=TRUE)
check()
comment_example_rename <- dplyr::rename(comment_example, page_notes=Notes)
toks_comment <- token_comments(comment_example_rename)
transcript_example_rename <- dplyr::rename(transcript_example, text=Text)
toks_transcript <- token_transcript(transcript_example_rename)
collocation_object <- collocate_comments(toks_transcript, toks_comment, collocate_length = 6)
collocation_object
collocation_object <- collocate_comments(toks_transcript, toks_comment, collocate_length = 2)
collocation_object
check()
collocation_object <- collocate_comments_fuzzy(toks_transcript, toks_comment)
merged_frequency <- transcript_frequency(transcript_example_rename, collocation_object)
View(merged_frequency)
collocation_object <- collocate_comments(toks_transcript, toks_comment)
View(merged_frequency)
merged_frequency <- transcript_frequency(transcript_example_rename, collocation_object)
load_all()
merged_frequency <- transcript_frequency(transcript_example_rename, collocation_object)
grep("col_",colnames(collocate_object))
grep("col_",colnames(collocation_object))
grep("col_",colnames(collocation_object), value=TRUE)
load_all()
merged_frequency <- transcript_frequency(transcript_example_rename, collocation_object)
View(merged_frequency)
check()
check()
use_test()
transcript_example
transcript_test <- data.frame(text="This is a test.")
collocation_object
tail(collocation_object)
transcript_test <- data.frame(text="This is a test.")
collocation_test <- data.frame(word_number=1:4, col_1=c(2,4,6, NA), col_2=c(NA, 2, 4, 6),
to_merge = c("this", "is", "a", "test"),
collocation= c("this is", "is a", "a test", NA))
transcript_frequency(transcript_test, collocation_test)
View(transcript_frequency(transcript_test, collocation_test))
dim(transcript_frequency(transcript_test, collocation_test))
c(4,14)
transcript_test <- transcript_frequency(transcript_test, collocation_test)
transcript_test$Freq
check()
integer(c(4,14))
c(integer(4),integer(14))
c(4L, 14L)
check()
transcript_test <- data.frame(text="<i>This <\i> <b>is</b> a<br> test.")
transcript_test <- data.frame(text="<i>This <\\i> <b>is</b> a<br> test.")
collocation_test <- data.frame(word_number=1:4, col_1=c(2,4,6, NA), col_2=c(NA, 2, 4, 6),
to_merge = c("this", "is", "a", "test"),
collocation= c("this is", "is a", "a test", NA))
transcript_test <- transcript_frequency(transcript_test, collocation_test)
transcript_test
collocation_plot(transcrip)
collocation_plot(transcript_test)
freq_plot <- collocation_plot(transcript_test)
page_highlight <- highlighted_text(freq_plot, transcript_test)
page_highlight
load_all()
transcript_test
View(transcript_test)
check()
load_all()
transcript_test <- transcript_frequency(transcript_test, collocation_test)
load_all()
transcript_test <- transcript_frequency(transcript_test, collocation_test)
rlang::last_trace()
transcript_test <- data.frame(text="<i>This <\\i> <b>is</b> a<br> test.")
collocation_test <- data.frame(word_number=1:4, col_1=c(2,4,6, NA), col_2=c(NA, 2, 4, 6),
to_merge = c("this", "is", "a", "test"),
collocation= c("this is", "is a", "a test", NA))
transcript_test <- transcript_frequency(transcript_test, collocation_test)
View(transcript_test)
transcript_test <- transcript_frequency(transcript_test, collocation_test)
load_all()
transcript_test <- data.frame(text="<i>This <\\i> <b>is</b> a<br> test.")
collocation_test <- data.frame(word_number=1:4, col_1=c(2,4,6, NA), col_2=c(NA, 2, 4, 6),
to_merge = c("this", "is", "a", "test"),
collocation= c("this is", "is a", "a test", NA))
transcript_test <- transcript_frequency(transcript_test, collocation_test)
View(transcript_test)
dim(transcript_test)
transcript_test$Freq
load_all()
transcript_test <- data.frame(text="<i>This <\\i> <b>is</b> a<br> test.")
collocation_test <- data.frame(word_number=1:4, col_1=c(2,4,6, NA), col_2=c(NA, 2, 4, 6),
to_merge = c("this", "is", "a", "test"),
collocation= c("this is", "is a", "a test", NA))
frequency_test <- transcript_frequency(transcript_test, collocation_test)
View(frequency_test)
freq_plot <- collocation_plot(frequency_test)
freq_plot
plot_object<- freq_plot
page_df<-plot_object$build$data[[1]]
page_df
test_highlight <- highlighted_text(freq_plot, transcript_test)
test_highlight
load_all()
transcript_test <- data.frame(text="<i>This </i> <b>is</b> a<br> test.")
collocation_test <- data.frame(word_number=1:4, col_1=c(2,4,6, NA), col_2=c(NA, 2, 4, 6),
to_merge = c("this", "is", "a", "test"),
collocation= c("this is", "is a", "a test", NA))
frequency_test <- transcript_frequency(transcript_test, collocation_test)
freq_plot <- collocation_plot(frequency_test)
test_highlight <- highlighted_text(freq_plot, transcript_test)
View(test_highlight)
View(frequency_test)
test_highlight
freq_plot$build$data[[1]]
View(freq_plot$build$data[[1]])
# poem$lines <- gsub("([^ ])(<)", "\\1 \\2", poem$lines)
poem$lines <- gsub("< ", "<", poem$lines)
check()
check()
load_all()
transcript_test <- data.frame(text="<i>This </i> <b>is</b> a<br> test.")
collocation_test <- data.frame(word_number=1:4, col_1=c(2,4,6, NA), col_2=c(NA, 2, 4, 6),
to_merge = c("this", "is", "a", "test"),
collocation= c("this is", "is a", "a test", NA))
frequency_test <- transcript_frequency(transcript_test, collocation_test)
View(frequency_test)
freq_plot <- collocation_plot(frequency_test)
View(freq_plot$build$data[[1]])
load_all()
frequency_test <- transcript_frequency(transcript_test, collocation_test)
View(frequency_test)
freq_plot <- collocation_plot(frequency_test)
View(freq_plot$build$data[[1]])
page_df<- freq_plot$build$data[[1]]
!(grepl("<.*?>",page_df$label))
!(grepl("<.*?>",page_df$label)) & !(page_df$label %in% "-")
page_df$missing_val <- !(grepl("<.*?>",page_df$label)) & !(page_df$label %in% "-")
page_df
i <- 5
which(page_df$missing_val)
page_df$nonmissing_val <- !(grepl("<.*?>",page_df$label)) & !(page_df$label %in% "-")
which(page_df$nonmissing_val)
max(which(page_df$nonmissing_val))
max(which(page_df$nonmissing_val)<i)
max(which(page_df$nonmissing_val<i))
i
which(page_df$nonmissing_val<i)
which(page_df$nonmissing_val)
which(page_df$nonmissing_val)<i
which(which(page_df$nonmissing_val)<i)
which(page_df$nonmissing_val)[which(page_df$nonmissing_val)<i,]
which(page_df$nonmissing_val)[which(page_df$nonmissing_val)<i]
which(page_df$nonmissing_val)[which(page_df$nonmissing_val)<9]
max(which(page_df$nonmissing_val)[which(page_df$nonmissing_val)<9])
load_all()
comment_example_rename <- dplyr::rename(comment_example, page_notes=Notes)
toks_comment <- token_comments(comment_example_rename)
transcript_example_rename <- dplyr::rename(transcript_example, text=Text)
toks_transcript <- token_transcript(transcript_example_rename)
collocation_object <- collocate_comments_fuzzy(toks_transcript, toks_comment)
head(collocation_object)
head(collocation_object, 8)
View(collocation_object)
merged_frequency <- transcript_frequency(transcript_example_rename, collocation_object)
View(merged_frequency)
freq_plot <- collocation_plot(merged_frequency)
View(freq_plot$build$data[[1]])
page_highlight <- highlighted_text(freq_plot, merged_frequency)
page_highlight
plot_object <- freq_plot
page_df<-plot_object$build$data[[1]]
page_df$ID <- seq.int(nrow(page_df))
page_df$cleancolor <- gsub("#","",page_df$colour)
page_df$nonmissing_val <- !(grepl("<.*?>",page_df$label)) & !(page_df$label %in% "-")
page_df$rgb <- NA
page_df$color_def <- NA
page_df$word_assign <- NA
first_word <- "Yes"
#### CSS Color Assign ###
#Get color from ggplot object, and paste css code together to print colors
for (i in 1:length(page_df$colour)){
if (grepl("<.*?>",page_df$label[i])){
page_df$word_assign[i] <- page_df$label[i]
}else if (first_word == "Yes"){
page_df$word_assign[i] <- paste("<div style=\"display: inline-block; padding:0px;
margin-left:-5px; background: linear-gradient(to right,",page_df$colour[i],",",page_df$colour[i],") \">",page_df$label[i],"&nbsp;","</div>", sep="")
first_word <- "No"
}else {
previous_color <- max(which(page_df$nonmissing_val)[which(page_df$nonmissing_val)<i])
next_color <- min(which(page_df$nonmissing_val)[which(page_df$nonmissing_val)>i])
if (page_df$label[i] =="-"){
page_df$word_assign[i] <- paste("<div style=\"display: inline-block; padding:0px;
margin-left:-5px; background: linear-gradient(to right,",page_df$colour[previous_color],",",page_df$colour[next_color],") \">",page_df$label[i],"&nbsp;","</div>", sep="")
}else{
page_df$word_assign[i] <- paste("<div style=\"display: inline-block; padding:0px;
margin-left:-5px; background: linear-gradient(to right,",page_df$colour[previous_color],",",page_df$colour[i],") \">",page_df$label[i],"&nbsp;","</div>", sep="")
}
}
}
i
page_df[67,]
page_df$rgb <- NA
page_df$color_def <- NA
page_df$word_assign <- NA
first_word <- "Yes"
#### CSS Color Assign ###
#Get color from ggplot object, and paste css code together to print colors
for (i in 1:length(page_df$colour)){
if (grepl("<.*?>",page_df$label[i])){
page_df$word_assign[i] <- page_df$label[i]
}else if (first_word == "Yes"){
page_df$word_assign[i] <- paste("<div style=\"display: inline-block; padding:0px;
margin-left:-5px; background: linear-gradient(to right,",page_df$colour[i],",",page_df$colour[i],") \">",page_df$label[i],"&nbsp;","</div>", sep="")
first_word <- "No"
}else {
previous_color <- max(which(page_df$nonmissing_val)[which(page_df$nonmissing_val)<i])
if (page_df$label[i] =="-"){
next_color <- min(which(page_df$nonmissing_val)[which(page_df$nonmissing_val)>i])
page_df$word_assign[i] <- paste("<div style=\"display: inline-block; padding:0px;
margin-left:-5px; background: linear-gradient(to right,",page_df$colour[previous_color],",",page_df$colour[next_color],") \">",page_df$label[i],"&nbsp;","</div>", sep="")
}else{
page_df$word_assign[i] <- paste("<div style=\"display: inline-block; padding:0px;
margin-left:-5px; background: linear-gradient(to right,",page_df$colour[previous_color],",",page_df$colour[i],") \">",page_df$label[i],"&nbsp;","</div>", sep="")
}
}
}
View(page_df$word_assign)
View(page_df)
complete_wordassign<-paste(as.vector(page_df$word_assign), collapse="")
complete_wordassign
load_all()
comment_example_rename <- dplyr::rename(comment_example, page_notes=Notes)
toks_comment <- token_comments(comment_example_rename)
transcript_example_rename <- dplyr::rename(transcript_example, text=Text)
toks_transcript <- token_transcript(transcript_example_rename)
collocation_object <- collocate_comments_fuzzy(toks_transcript, toks_comment)
merged_frequency <- transcript_frequency(transcript_example_rename, collocation_object)
freq_plot <- collocation_plot(merged_frequency)
page_highlight <- highlighted_text(freq_plot, merged_frequency)
page_highlight
transcript_example
gsub("</br>","<br>", transcript_example)
View(transcript_example)
transcript_example <- gsub("</br>","<br>", transcript_example)
use_data(transcript_example, overwrite=TRUE)
check()
transcript_example
#'
#' @format ## `transcript_example`
#' A data frame with 1 row and 1 column:
#' \describe{
#'   \item{Text}{Transcript text corresponding to the jury perception study}
#'
#' }
#' @source Jury Perception Study
#' transcript_example <- gsub("</br>","<br>", transcript_example)
#' transcript_example <- data.frame(Text = transcript_example)
"transcript_example"
transcript_example <- data.frame(Text = transcript_example)
transcript_example <- data.frame(Text = transcript_example)
transcript_example
use_data(transcript_example)
use_data(transcript_example, overwrite=TRUE)
check()
load_all()
transcript_test <- data.frame(text="<i>This </i> <b>is</b> a<br> test.")
collocation_test <- data.frame(word_number=1:4, col_1=c(2,4,6, NA), col_2=c(NA, 2, 4, 6),
to_merge = c("this", "is", "a", "test"),
collocation= c("this is", "is a", "a test", NA))
frequency_test <- transcript_frequency(transcript_test, collocation_test)
frequency_test
freq_plot <- collocation_plot(frequency_test)
freq_plot$build$data[[1]]
use_test()
freq_plot$freq
check()
check()
test_highlight <- highlighted_text(freq_plot, transcript_test)
test_highlight
use_test()
check()
collocation_object_2col <- collocate_comments(toks_transcript, toks_comment, collocate_length = 2)
head(collocation_object_2col)
head(collocation_object_2col, n=7)
freq_plot_2col <- collocation_plot(merged_frequency_2col)
merged_frequency_2col <- transcript_frequency(transcript_example_rename, collocation_object_2col)
merged_frequency_2col
View(merged_frequency_2col)
freq_plot_2col <- collocation_plot(merged_frequency_2col)
View(freq_plot_2col$build$data[[1]])
plot_object <- freq_plot_2col
page_df<-plot_object$build$data[[1]]
page_df$ID <- seq.int(nrow(page_df))
page_df$cleancolor <- gsub("#","",page_df$colour)
page_df$nonmissing_val <- !(grepl("<.*?>",page_df$label)) & !(page_df$label %in% "-")
View(page_df)
use_test()
load_all()
page_highlight_2col <- highlighted_text(freq_plot_2col, merged_frequency_2col)
page_highlight_2col
load_all()
transcript_test <- data.frame(text="This - is a - test.")
collocation_test <- data.frame(word_number=1:4, col_1=c(2,4,6, NA), col_2=c(NA, 2, 4, 6),
to_merge = c("this", "is", "a", "test"),
collocation= c("this is", "is a", "a test", NA))
frequency_test <- transcript_frequency(transcript_test, collocation_test)
frequency_test
freq_plot <- collocation_plot(frequency_test)
test_highlight <- highlighted_text(freq_plot, transcript_test)
test_highlight
check()
use_test()
frequency_test
View(frequency_test)
View(freq_plot$build$data[[1]])
check()
check()
document()
build_readme()
install.packages("pandoc")
rmarkdown::pandoc_available()
withr::with_path(dirname(rmarkdown::pandoc_exec()))
usethis::use_news_md()
usethis::use_cran_comments()
check()
library(devtools)
check()
document()
document()
usethis::use_github_links()
usethis::use_github_links(overwrite=TRUE)
withr::with_path(dirname(rmarkdown::pandoc_exec()))
rhub::check_for_cran(env_vars=c(R_COMPILE_AND_INSTALL_PACKAGES = "always", LIBARROW_BINARY="true"))
use_test()
library(devtools)
use_test()
use_test()
check()
document()
build_readme()
load_all()
rhub::check_for_cran(env_vars=c(R_COMPILE_AND_INSTALL_PACKAGES = "always", LIBARROW_BINARY="true"))
?rhubv2
document()
library(devtools)
document()
news(package="highlightr")
document()
load_all()
news(package="highlightr")
rmarkdown::pandoc_available()
rmarkdown::pandoc_version()
Sys.getenv("RSTUDIO_PANDOC")
Sys.setenv(RSTUDIO_PANDOC="C:/Program Files/RStudio/resources/app/bin/quarto/bin/tools")
withr::with_path(dirname(rmarkdown::pandoc_exec()))
withr::with_path(getwd(),rmarkdown::pandoc_exec())
withr::with_path(getwd(),dirname(rmarkdown::pandoc_exec()))
rmarkdown::pandoc_exec()
pandoc --version
rmarkdown::pandoc_available()
# highlightr 0.0.0.9000
library(devtools)
document()
usethis::use_cran_comments()
document()
document()
use_mit_license()
urlchecker::url_check()
library(devtools)
document()
check()
document()
check()
document()
check()
build_readme()
document()
document()
check()
urlchecker::url_check()
document()
urlchecker::url_check()
devtools::check(remote = TRUE)
urlchecker::url_check()
devtools::build_readme()
document()
devtools::check(remote = TRUE, manual = TRUE)
devtools::check_win_devel()
rhub::check_for_cran()
rhub_check()
rhub::rhub_check()
rhub::rhub_check(gh_url = "https://github.com/rachelesrogers/highlightr")
urlchecker::url_check()
usethis::use_version('major')
check()
devtools::submit_cran()
library(highlightr)
comment_example_rename <- dplyr::rename(comment_example, page_notes=Notes)
toks_comment <- token_comments(comment_example_rename)
transcript_example_rename <- dplyr::rename(transcript_example, text=Text)
toks_transcript <- token_transcript(transcript_example_rename)
collocation_object <- collocate_comments_fuzzy(toks_transcript, toks_comment)
merged_frequency <- transcript_frequency(transcript_example_rename, collocation_object)
freq_plot <- collocation_plot(merged_frequency)
page_highlight <- highlighted_text(freq_plot)
page_highlight
head(page_highlight)
substr(page_highlight)
substr(page_highlight,1,10)
substr(page_highlight,1,20)
substr(page_highlight,1,50)
library(devtools)
build_readme()
build_readme()
build_readme()
build_readme()
document()
install()
build_readme()
document()
remove.packages(highlightr)
remove.packages("highlightr")
document()
library(devtools)
document()
check()
load("~/PhD Research/highlightr/data/wiki_pages.rda")
wiki_pages
transcript_example <- transcript_full %>% filter(Page==2) %>% select(Text)
usethis::use_github_release()
library(devtools)
usethis::use_github_release()
library(devtools)
usethis::use_github_release()
debug()
browser()
usethis::use_github_release()
debug(usethis::use_github_release())
